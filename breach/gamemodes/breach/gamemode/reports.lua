
reports = { }
path = "breach/reports/"
nextID = 0

/*
-- report struct --
report = {
	id = 0
	reporting = "reporting player"
	reported = "reported player"
	reason = "report reason"
	answer = "player answer"
	steamID = "STEAM_0:0:75261208"
}

reports = {
	player_id64 = {report0, report2}
	otherPlayer_id64 = {report1, report3, report4, report5, report6}
}							--^ that table is saved as JSON in file ^
*/

function LoadReports()
	local files, dirs = file.Find( path.."*.txt", "DATA" )
	local reportedPlayers = { }
	for k, v in ipairs( files ) do
		if v == "nextID_ReportsManager_DoNotEditThisFile.txt" then
			nextID = tonumber( file.Read( path.."nextID_ReportsManager_DoNotEditThisFile.txt") )
		end
		table.ForceInsert( reportedPlayers, string.sub( v, 0, string.len( v ) - 4 ) )
	end
	reports = reports or { }
	for k, v in ipairs( reportedPlayers ) do
		local data = util.JSONToTable( file.Read( path..v..".txt" ) )
		if data then
			reports[v] = data
		else
			reports[v] = "ERROR"
			print( "Failed on reading report data of player "..v )
		end
	end
end

function SaveReports()
	deleteReports()
	file.Write( path.."nextID_ReportsManager_DoNotEditThisFile.txt", nextID )
	for k, v in pairs( reports ) do
		file.Write( path..k..".txt", util.TableToJSON( v ) )
	end
end

function DeleteReports( playerName )
	local files, dirs = file.Find( path.."*.txt", "DATA" )
	if playerName then
		for k, v in pairs( files ) do
			if v == playerName..".txt" then
				file.Delete( path..v )
			end
		end
	else
		for k, v in pairs( files ) do
			file.Delete( path..v )
		end
	end
end

function ClearBufferData()
	reports = { }
	nextID = 0
end

function ReportPlayer( reportin, reporte, reaso, canAnswer )
	if reportin:GetName() == reporte and canAnswer then
		ReportPlayer( reportin, reportin:GetName(), "Auto generated by server: Spam", false )
		return
	end
	local reportedPlayer = nil
	for k, v in pairs( player.GetAll() ) do
		if v:GetName() == reporte then
			reportedPlayer = v
			break
		end
	end
	if !reportedPlayer then
		reportin:PrintMessage( HUD_PRINTTALK, "Player "..reporte.." not found!" )
		return
	end
	local found = false
	for k, v in pairs( reports ) do
		if tostring( k ) == reportedPlayer:SteamID64() then
			reporte = reportedPlayer:GetName()
			answe = ""
			if canAnswer == false then
				answe = "Server blocked ability to answer this report"
			end
			local report = {
				id = nextID,
				reporting = reportin:GetName(),
				reported = reporte,
				answer = answe,
				steamID = reportedPlayer:SteamID(),
			}
			table.ForceInsert( v, report )
			found == true
			break
		end
	end
	if !found then
		reporte = reportedPlayer:GetName()
		answe = ""
		if canAnswer == false then
			answe = "Server blocked ability to answer this report"
		end
		local report = {
			id = nextID,
			reporting = reportin:GetName(),
			reported = reporte,
			reason = reaso,
			answer = answe,
			steamID = reportedPlayer:SteamID(),
		}
		table.ForceInsert( reports, {report} )
	end
	reportin:PrintMessage( HUD_PRINTTALK, "You reported "..reporte.." Case ID:"..nextID )
	reportedPlayer:PrintMessage( HUD_PRINTCENTER, "You have been reported! More info on chat" )
	reportedPlayer:PrintMessage( HUD_PRINTTALK, "You have been reported! Your case ID is "..nextID..", with reason: "..reaso.."." )
	reportedPlayer:PrintMessage( HUD_PRINTTALK, "You can answer on this report by using command: br_report_answer '"..nextID.."' 'Here describe your vesrion'" )
	nextID = nextID + 1
end

function 